package stk.fun;

import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Sebastian Gruszka
 */
public class ProgressWheel extends javax.swing.JDialog {

    /** Creates new form WheelSpinning */
    public ProgressWheel(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        runProgress();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        x00 = evt.getX();
        y00 = evt.getY();
    }//GEN-LAST:event_formMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgressWheel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgressWheel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgressWheel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgressWheel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ProgressWheel dialog = new ProgressWheel(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    int iterator = 0;
    int x00 = 175;
    int y00 = 200;

    /**
     * Backbround thread
     */
    private void runProgress() {
        new Thread() {

            public void run() {
                while (true) {
                    iterator += 8;
                    if (iterator >= 256) {
                        iterator = 0;
                    }
                    repaint();
                    try {
                        sleep(50);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    @Override
    public void paint(Graphics g) {
        for (int i = 0; i < 8; i++) {
            drawCircle(g, x00, y00, 50, 100, -i, (iterator + i * 32));
        }
    }

    /**
     * Draw single circle.
     * @param g
     * @param x
     * @param y
     * @param size
     * @param dist
     * @param angle
     * @param grayColorPower 
     */
    void drawCircle(Graphics g, int x, int y, int size, int dist, int angle, int grayColorPower) {
        if (grayColorPower >= 256) {
            grayColorPower = grayColorPower - 256;
        }
        if (grayColorPower > -1 && grayColorPower < 256) {
            g.setColor(new Color(grayColorPower, grayColorPower, grayColorPower));
        } else {
            g.setColor(Color.red);
        }
        g.fillRoundRect(x + (int) (Math.cos(angle * Math.PI / 4) * dist), y + (int) (Math.sin(angle * Math.PI / 4) * dist), size, size, size, size);
    }
}
